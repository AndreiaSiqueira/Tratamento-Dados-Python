# programação orientada a objetos -ETL  
# nessa etapa o foco é traduzir o script fusao_mercado_fev para facilitar o entendimento do script aos proximos usuários
import json
import csv

class Dados:
    #metodo construtor
    def __init__(self, path, tipo_dados):#self maneira que o python representa um objeto
        self.path = path ## __path representa um metodo privado
        self.tipo_dados = tipo_dados  
        self.dados = self.leitura_dados()
        self.nome_colunas= self.get_columns()
        self.qtd_linhas= self.size_linhas()

    def leitura_json(self):

        dados_json=[]
        with open(self.path,'r') as file:
            dados_json = json.load(file)

        return dados_json



    def leitura_csv(self):
        dados_csv=[]
        with open(self.path, 'r') as file:
            spamreader= csv.DictReader(file, delimiter=',')
            for row in spamreader:
                dados_csv.append(row)
        return dados_csv



    def leitura_dados(self):
        dados=[]
        if self.tipo_dados == 'csv':
            dados= self.leitura_csv()

        elif self.tipo_dados == 'json':
            
            dados= self.leitura_json()

        # condição adicionada para realizar o join de duas listas pois não é um método construtor 
        elif self.tipo_dados=='list':
            dados= self.path
            self.path= 'lista em momoria'
        return dados
    
    def get_columns(self):
        return list(self.dados[-1].keys())
    
    def rename_columns(self, key_mapping):
        new_dados = []
        for old_dict in self.dados:
            dict_temp = {}
            for old_key, value in old_dict.items():
                dict_temp[key_mapping[old_key]] = value
            new_dados.append(dict_temp)
        self.dados= new_dados
        self.nome_colunas= self.get_columns()

    
    def size_linhas(self):
        return len(self.dados)
    #metodo estatico
    def join(dadosA, dadosB):
        combined_list=[]
        combined_list.extend(dadosA.dados)
        combined_list.extend(dadosB.dados)
        return Dados(combined_list, 'list')
    
    def transform_dados_tabela(self):
        dados_combinados_tabela = [self.nome_colunas]

        for row in self.dados:
            linha = []
            for coluna in self.nome_colunas:
                linha.append(row.get(coluna, 'Indisponivel'))
            dados_combinados_tabela.append(linha)

        return dados_combinados_tabela

    def salvando_dados(self, path):
        dados_combinados_tabela= self.transform_dados_tabela()
        with open(path, 'w') as file:
            
            writer = csv.writer(file)


#EXIBIÇÃO
path_json = 'data_raw/dados_empresaA.json'
path_csv = 'data_raw/dados_empresaB.csv'

dados_empresaA= Dados(path_json, 'json')
#print(dados_empresaA.nome)
#EXTRACT
dados_empresaB= Dados(path_csv, 'csv')


# transformação de dados
key_mapping = {'Nome do Item': 'Nome do Produto',
                'Classificação do Produto': 'Categoria do Produto',
                'Valor em Reais (R$)': 'Preço do Produto (R$)',
                'Quantidade em Estoque': 'Quantidade em Estoque',
                'Nome da Loja': 'Filial',
                'Data da Venda': 'Data da Venda'}


dados_empresaB.rename_columns(key_mapping)
print(F'Colunas do csv renomeadas {dados_empresaB.nome_colunas}')
print(f'Qtd de linhas EmpresaA: {dados_empresaA.qtd_linhas}')
print(f'Qtd de linhas EmpresaB: {dados_empresaB.qtd_linhas}')
#chama nome da classe Dados para metodo estático
dados_fusao= Dados.join(dados_empresaA, dados_empresaB)
print(f'dados da fusão {dados_fusao}')

print(f'Colunas Dados fusao: {dados_fusao.nome_colunas}')
print(f'Qtd de linhas dados fusão: {dados_fusao.qtd_linhas}')
#Load

path_dados_combinados='data_processed/dados_combinados.csv'
dados_fusao.salvando_dados(path_dados_combinados)
print(path_dados_combinados)


            writer.writerows(dados_combinados_tabela)
